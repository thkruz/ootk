// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Vector should add two Vectors and return a new Vector 1`] = `
Vector {
  "elements": Array [
    5,
    7,
    9,
  ],
  "length": 3,
}
`;

exports[`Vector should calculate the angle between two Vectors 1`] = `0.22572612855273394`;

exports[`Vector should calculate the angle between two Vectors in degrees 1`] = `12.93315449189912`;

exports[`Vector should calculate the bisect of two Vectors 1`] = `
Vector {
  "elements": Array [
    0.3638667954886596,
    0.5556981892812022,
    0.7475295830737448,
  ],
  "length": 3,
}
`;

exports[`Vector should calculate the cross product of two Vectors 1`] = `
Vector {
  "elements": Array [
    -3,
    6,
    -3,
  ],
  "length": 3,
}
`;

exports[`Vector should calculate the distance between two Vectors 1`] = `5.196152422706632`;

exports[`Vector should calculate the dot product of two Vectors 1`] = `32`;

exports[`Vector should calculate the outer product of two Vectors 1`] = `
Matrix {
  "columns": 3,
  "elements": Array [
    Array [
      4,
      5,
      6,
    ],
    Array [
      8,
      10,
      12,
    ],
    Array [
      12,
      15,
      18,
    ],
  ],
  "rows": 3,
}
`;

exports[`Vector should calculate the sight of a Vector 1`] = `true`;

exports[`Vector should calculate the skew symmetric matrix of a Vector 1`] = `
Matrix {
  "columns": 3,
  "elements": Array [
    Array [
      0,
      -3,
      2,
    ],
    Array [
      3,
      0,
      -1,
    ],
    Array [
      -2,
      1,
      0,
    ],
  ],
  "rows": 3,
}
`;

exports[`Vector should convert a Vector to a Vector3D 1`] = `
Vector3D {
  "x": 2,
  "y": 3,
  "z": undefined,
}
`;

exports[`Vector should create a Vector with a negative length 1`] = `[Function]`;

exports[`Vector should get a column from a Vector 1`] = `
Matrix {
  "columns": 1,
  "elements": Array [
    Array [
      1,
    ],
    Array [
      2,
    ],
    Array [
      3,
    ],
  ],
  "rows": 3,
}
`;

exports[`Vector should get a row from a Vector 1`] = `
Matrix {
  "columns": 3,
  "elements": Array [
    Array [
      1,
      2,
      3,
    ],
  ],
  "rows": 1,
}
`;

exports[`Vector should join two Vectors 1`] = `
Vector {
  "elements": Array [
    1,
    2,
    3,
    4,
    5,
    6,
  ],
  "length": 6,
}
`;

exports[`Vector should normalize a Vector and return a new Vector 1`] = `
Vector {
  "elements": Array [
    0.6000000000000001,
    0.8,
  ],
  "length": 2,
}
`;

exports[`Vector should return a list representation of a Vector 1`] = `
Array [
  1,
  2,
  3,
]
`;

exports[`Vector should return a string representation of a Vector 1`] = `"[1, 2, 3]"`;

exports[`Vector should return an array representation of a Vector 1`] = `
Float64Array [
  1,
  2,
  3,
]
`;

exports[`Vector should rotate a Vector around the x-axis 1`] = `
Vector {
  "elements": Array [
    1,
    3,
    -1.9999999999999998,
  ],
  "length": 3,
}
`;

exports[`Vector should rotate a Vector around the y-axis 1`] = `
Vector {
  "elements": Array [
    -3,
    2,
    1.0000000000000002,
  ],
  "length": 3,
}
`;

exports[`Vector should rotate a Vector around the z-axis 1`] = `
Vector {
  "elements": Array [
    2,
    -0.9999999999999999,
    3,
  ],
  "length": 3,
}
`;

exports[`Vector should slice a Vector 1`] = `
Vector {
  "elements": Array [
    2,
  ],
  "length": 1,
}
`;
