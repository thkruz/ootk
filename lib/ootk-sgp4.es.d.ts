/**
 * @author Theodore Kruczek.
 * @description Orbital Object ToolKit (OOTK) is a collection of tools for working
 * with satellites and other orbital objects. The Sgp4 module contains a TypeScript
 * port of the 2020 version of sgp4unit.cpp from "Fundamentals of Astrodynamics and
 * Applications" by David Vallado. All of the original comments and notes are
 * inserted in the code below in order provide context to the functions and clarify
 * any adjustments made for TypeScript/JavaScript compatibility.
 *
 * @copyright MIT License.
 * Copyright (c) 2020-2021 Theodore Kruczek
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/** @interface SatelliteRecord contains all of the orbital parameters necessary for running SGP4. It is generated by Sgp4.createSatrec.*/
interface SatelliteRecord {
    a: number;
    am: number;
    alta: number;
    altp: number;
    argpdot: number;
    argpo: number;
    aycof: number;
    bstar: number;
    cc1: number;
    cc4: number;
    cc5: number;
    con41: number;
    d2: number;
    d3: number;
    d4: number;
    d5232: number;
    d5421: number;
    d5433: number;
    dedt: number;
    delmo: number;
    del1: number;
    ecco: number;
    em: number;
    epochdays: number;
    epochyr: number;
    error: number;
    eta: number;
    gsto: number;
    im: number;
    inclo: number;
    init: string;
    isimp: number;
    jdsatepoch: number;
    mdot: number;
    method: string;
    mo: number;
    mm: number;
    nddot: number;
    ndot: number;
    no: number;
    nodecf: number;
    nodedot: number;
    nodeo: number;
    om: number;
    Om: number;
    omgcof: number;
    operationmode: string;
    satnum: string;
    sinmao: number;
    t: number;
    t2cof: number;
    t3cof: number;
    t4cof: number;
    t5cof: number;
    x1mth2: number;
    x7thm1: number;
    xlcof: number;
    xmcof: number;
    xfact: number;
    xlamo: number;
    xli: number;
    xgh4: number;
    xgh3: number;
    xh2: number;
    xi2: number;
    xi3: number;
    xl2: number;
    xl3: number;
    xl4: number;
    zmol: number;
    zmos: number;
    dmdt: number;
    dnodt: number;
    domdt: number;
    e3: number;
    ee2: number;
    peo: number;
    pgho: number;
    pho: number;
    PInco: number;
    plo: number;
    se2: number;
    se3: number;
    sgh2: number;
    sgh3: number;
    sgh4: number;
    sh2: number;
    sh3: number;
    si2: number;
    si3: number;
    sl2: number;
    sl3: number;
    sl4: number;
    xgh2: number;
    xh3: number;
    tumin: number;
    radiusearthkm: number;
    irez: number;
    d3210: number;
    d3222: number;
    d4410: number;
    d4422: number;
    d5220: number;
    del2: number;
    del3: number;
    didt: number;
    atime: number;
    j2: number;
    j3: number;
    j4: number;
    mus: number;
    xke: number;
    j3oj2: number;
    xni: number;
    d2201: number;
    d2211: number;
    nm: number;
}
/** @typedef StateVector is a three dimensional position and velocity vector output from Sgp4.propagate.*/
declare type StateVector = {
    position: {
        x: number;
        y: number;
        z: number;
    } | boolean;
    velocity: {
        x: number;
        y: number;
        z: number;
    } | boolean;
};
/** @typedef vec3 is a flat three dimensional array used in vector math.*/
declare type vec3 = [number, number, number];
declare class Sgp4 {
    private static dpper;
    private static dscom;
    private static dsinit;
    private static dspace;
    private static initl;
    private static sgp4init;
    static propagate(satrec: SatelliteRecord, tsince: number): StateVector;
    private static getgravconst;
    static createSatrec(tleLine1: string, tleLine2: string, whichconst?: string, opsmode?: string): SatelliteRecord;
    static gstime(jdut1: number): number;
    static sgn(x: number): number;
    static mag(x: vec3): number;
    static cross(vec1: vec3, vec2: vec3): vec3;
    static dot(x: vec3, y: vec3): number;
    static angle(vec1: vec3, vec2: vec3): number;
    static asinh(xval: number): number;
    static newtonnu(ecc: number, nu: number): {
        e0: number;
        m: number;
    };
    static sinh(x: number): number;
    static rv2coe(r: vec3, v: vec3, mus: number): {
        p: number;
        a: number;
        ecc: number;
        incl: number;
        omega: number;
        argp: number;
        nu: number;
        m: number;
        arglat: number;
        truelon: number;
        lonper: number;
    };
    static jday(year: number, mon: number, day: number, hr: number, minute: number, sec: number): {
        jd: number;
        jdFrac: number;
    };
    static days2mdhms(year: number, days: number): {
        mon: number;
        day: number;
        hr: number;
        minute: number;
        sec: number;
    };
    static invjday(jd: number, jdfrac: number): {
        year: number;
        mon: number;
        day: number;
        hr: number;
        minute: number;
        sec: number;
    };
}
export { Sgp4 };
